<center>三. 粗糙的Blog<center>
----

*我们在上一章只是运行了我们的项目，然而却没有做任何实质性的工作，就好像在开发C++项目时某些IDE自动生成的Hello World程序一样只能给我们带来一瞬间的喜悦。这一章我们将开始正式的开发过程（丫的非正式的唠叨了两章，汗……）。这一章我们将：*

* *构建myblog项目的大体框架*
* *了解Rails使用的MVC模型，数据传递方式*
* *了解Active Record的使用方法*
* *了解Scaffold的用法*
* *路由器规则
* *实现日志相关功能*
* *学会使用api，学会读文档*
####（从现在开始，如果没有特殊说明，那么所有的路径都是在myblog这个项目路径下的，例如，`/app/controller`的意思就是`**/**/myblog/app/controller`。）
##1. myblog 整体框架
让我们来看看我们都需要哪些功能——

* 日志（article）：每篇日志都有题目（title）、内容（content）、唯一的分类（category）、若干标签（label）。
* 用户（user）：每个用户有自己的用户名（name）、密码（password）、若干日志（article）
* 标签（label）：

##2. MVC模型
所谓MVC模型，也就是Model-View-Controller模型。是为了简易开发而约定的一套开发规范，被Rails作为其框架基础。MVC模型如下图所示：

![](./charpter3_MVC.png)

Model（模型）：模型可以理解为对于数据的定义，以及数据的关系。

View（视图）：View负责将数据以可视化的方式呈现给用户，

Controller（控制器）：Controller中是对于Model行为的定义

####MVC模型构建的网站其运作过程的过程如下：

>1) 浏览器将用户输入的网址或者某一个链接到的网址发送给我们的网站，网站通过解析可以“理解”这段网址的意思，解析的规则称之为route规则（一个个的网址就是一个个的route）。例如对于网址<http://www.myblog.com/articles/new>，首先浏览器会解析<http://www.myblog.com>在远程找到这个网址的主机，并将`/articles/new`发送给该主机。

>2) 紧接着Rails开始分析route——articles对应着一个控制器（controller），然后找到该controller下的new动作（action），这个action的默认方法是创建一个新的article，所以controller会继续找到对应的模型（model），通过一些数据库函数创建我们需要的对象（一个article对象），接着根据已经写好的视图（包含有Rails语句）创建对应的真正的视图（不含Rails代码）以便呈现给用户（输入、查看或保存），然后Rails将视图翻译成html页面交给浏览器。

>3) 浏览器显示html页面。

####对应规则

Rails中，model、controller、view之间的命名规则是特定的，举个例子来说

我们举个例子，比如我们的model为`article`，并且其中有一个`index`的方法，那么，我们可能以下部件（请注意其名称的单复数）：
* MySQL的database中对应的table：`articles`
* `/app/controllers`中的Controller：`articles_controller.rb`
* `/app/views`中：名为`articles`的文件夹，其中存放着各个方法对应的视图，当然这些视图代码中包含有Rails代码。具体我们会在一会儿介绍。
* `/app/views/articles`中：若干`.html.erb`文件，分别对应`articles_controller.rb`中对应名称的方法，比如index方法会被对应成`index.html.erb`文件。

##3. Active Record简介
Active Record可以理解为一种在众多数据库之上建立的统一查询方式。它把数据库中的一个表对应成一个类，把每一条记录对应成该类的一个实例。同时这个类中有若干类方法，可以提供如查询等众多功能。例如，如果存在articles这个表，它有title、content两个属性，那么我们可以有这样的语句

	myArticle=Article.find(1)#
	myTitle=myArticle.title#
	myContent=myArticle.content#

同时，使用Active Record将使得一对多关系的查询更加方便，我们会在之后讨论。

Active Record可以支持的变量类型有以下几种。

* binary
* boolean
* date
* datetime
* decimal
* float
* integer
* primary_key
* string
* text
* time
* timestamp

##4. 开始吧少年
进入项目文件夹根目录，依次输入以下两条语句

	rails generate scaffold article name:string content:text
	rake db:migrate

在浏览器中输入`localhost:3000/articles/new`，你会看到一个article的编辑界面，如下图：

![](./charpter3_article_new.png)

随便输入一些内容，点击保存，OK，你已经可以看到你的第一篇日志了，如下图：

![](./charpter3_show_first_article.png)

是不是有一种创世的感觉？

##5. 这才是开始。

我们也许感到了一丝沮丧，毕竟我们还是一点主动权都没有，而且并没有学到什么实在的东西。我们先看看我们刚刚都做了什么。

进入`/app`，你会看到这样的几个文件夹：

	assets  controllers  helpers  mailers  models  views

* assetes：存放着与前端显示有关的相关文件，我们将在下一章用到。
* controllers：存放着项目所用到的所有的controller。
* helpers：其中存放着若干辅助类，用于辅助model的功能（只需要在model中include一下即可），只有一个功能应该放在model里还是在helper中，我们会在以后的以后讨论，暂时不去管它。
* mailers：至今还没有学到这个文件夹的用途，囧……
* models：存放所有的model
* views：存放所有的view

进入`congtroller`文件夹，可以看到两个文件`application_controller.rb  articles_controller.rb`，我们之看`articles_controller.rb`。

首先我们需要回顾一下我们刚刚干了什么，我们执行了这样两条语句

	rails generate scaffold article name:string content:text
	rake db:migrate

这是两条Rails自带命令，它们的意思分别是：

* 建立一个模型article，并依据Rails既定的模版建立相应的controller和view。
* 进行数据迁移。

迁移的命令我们以后再讨论。

什么叫既定模版？Rails的设计者们认为，对于每一个模型（你可以理解为类，也可以理解为一类实体在数据库中的映射）都应该有以下的功能：创建、销毁、修改、展示实体，以及展示所有此模型的实体。这些功能对应在controller的代码中就是这些方法（请打开`articles_controller.rb`）：

* index：展示此模型对应的所有的实体，如果此模型是article，那么就会展示所有的article。
* show：只展示此模型对应的某一个特定的（就是用户指定的）实体。
* new：**准备**创建一个新的实体。
* edit：**准备**重新编辑某一特定的实体。
* create：*真正*在*数据库*中创建一个新的实体。
* update：*真正*在*数据库*中更新某一特定的实体。
* destroy：在数据库中删除某一特定的实体。

我们拿index和update函数来说明Rails数据流动的过程。

####index函数

我们注意到index函数的第一行：`@articles = Article.all`。学过Ruby的同学可能很熟悉，`@`符号是Rails全局变量的标志（类变量的标志是`@@`）。在Rails中，“全局”的范围除了整个def所定义的函数之外，还包括对应的view，也就是说，在其对应的`/app/views/articles/index.html.erb`中也可以使用，其中的代码可能是这个样子：

	<h1>Listing articles</h1>

	<table>
	  <tr>
	    <th>Name</th>
	    <th>Content</th>
	    <th></th>
	    <th></th>
	    <th></th>
	  </tr>

	<% @articles.each do |article| %>
	  <tr>
	    <td><%= article.name %></td>
	    <td><%= article.content %></td>
	    <td><%= link_to 'Show', article %></td>
	    <td><%= link_to 'Edit', edit_article_path(article) %></td>
	    <td><%= link_to 'Destroy', article, method: :delete, data: { confirm: 'Are you sure?' } %></td>
	  </tr>
	<% end %>
	</table>

	<br />

	<%= link_to 'New Article', new_article_path %>
    
首先是一个标题。然后是一个表格，表格的第一行是article的两个属性，之后的每一行分别是articles中每一篇article的属性值，你看到的界面也许是这样的：

![](./charpter3_index.png)

需要注意的是这两句代码以及其中间的内容：

	<% @articles.each do |article| %>
	<% end %>

`<%%>`是在.html.erb文件中嵌入Rails代码的标志，在`<%`和`%>`中的代码会通过Ruby去解释执行，并且可以在其中使用在controller中声明的全局变量。我们在上面提到的`@articles`就是在这里使用的。至于`@articles.each do |article|`这种用法属于Ruby的语法范围，可以自行谷歌，几分钟就可以学会。

需要解释的是`<%%>`和`<%=%>`的区别——这两中方式都可以嵌入Rails代码，不同的是，前一个仅仅是执行代码，而后一种则是将返回值嵌入html代码中。

####update函数

index函数只是把数据从Controller传送到View，那么如何从View将数据传送回Controller呢？从View将数据传回Controller并不是简单的通过全局变量就可以，因为Controller是后台部分，而View却只是前段部分，数据传递并非实时的（可以模拟实现，比如Ajax，我们会用专门的一章来讲解），事实上，全局变量的值只是在网页最开始呈现时完成的传递，如果我们想在之后进行传递，我们需要了解http向服务器“发送”数据（称之为“交互”）的两种基本方法——post或get。

HTTP-GET和HTTP-POST是使用HTTP的标准协议动词，用于编码和传送变量名/变量值对参数，并且使用相关的请求语义。每个HTTP-GET和HTTP-POST都由一系列HTTP请求头组成，这些请求头定义了客户端从服务器请求了什么，而响应则是由一系列HTTP应答头和应答数据组成，如果请求成功则返回应答。

HTTP-GET以使用MIME类型application/x-www-form-urlencoded的urlencoded文本的格式传递参数。Urlencoding是一种字符编码，保证被传送的参数由遵循规范的文本组成，例如一个空格的编码是"%20"。附加参数还能被认为是一个查询字符串。
　　与HTTP-GET类似，HTTP-POST参数也是被URL编码的。然而，变量名/变量值不作为URL的一部分被传送，而是放在实际的HTTP请求消息内部被传送。他们的区别如下：

>1）get是从服务器上获取数据，post是向服务器传送数据。

>2）   在客户端，Get方式在通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交。

>3） 对于get方式，服务器端用Request.QueryString获取变量的值，对于post方式，服务器端用Request.Form获取提交的数据。

>4）   GET方式提交的数据最多只能有1024字节，而POST则没有此限制。

>5）   安全性问题。正如在（1）中提到，使用 Get 的时候，参数会显示在地址栏上，而 Post 不会。所以，如果这些数据是中文数据而且是非敏感数据，那么使用 get；如果用户输入的数据不是中文字符而且包含敏感数据，那么还是使用 post为好

好了，官方的话说完了，让我们解释几个曾经在学习Rails之初困扰笔者的几个东西：

>1）params：我们可以看到，在articles_controller的update中，我们用到了一个变量——params。这是Html在发送post的时候默认的容器（请允许我先用容器去形容它），这是一个字典（哈希，散列，map，whatever），有一个方法可以看到这个变量的形式：

>>在`localhost:3000`页面下点击edit链接，修改一下点击update，搜寻终端下的信息（所谓的“Log”），你应该可以看到如下图的输出：

>>![params](./charpter3_params)

>我们可以看到，params中是一个map，是一组像这样的值——`"key"->value`，在controller中，我们通过`params[:key]`这样的形式就可以相应的value值。

>2）form：form的中文翻译是表单，是http默认的提交数据的形式，它和post的关系可以这样理解——post是方式，form是形式。或者说，form构建了post的key值，以及对应的value的变量类型。form的作用同时还体现在它提供了一些前端形式，比如

><div>
><h2>表单标签</h2>
><table class="dataintable">
><tbody><tr>
><th>标签</th>
><th>描述</th>
></tr>
><tr>
><td><a href="/tags/tag_form.asp">&lt;form&gt;</a></td>
><td>定义供用户输入的表单</td>
></tr>
><tr>
><td><a href="/tags/tag_input.asp">&lt;input&gt;</a></td>
><td>定义输入域</td>
></tr>
><tr>
><td><a href="/tags/tag_textarea.asp">&lt;textarea&gt;</a></td>
><td>定义文本域 (一个多行的输入控件)</td>
></tr>
><tr>
><td><a href="/tags/tag_label.asp">&lt;label&gt;</a></td>
><td>定义一个控制的标签</td>
></tr>
><tr>
><td><a href="/tags/tag_fieldset.asp">&lt;fieldset&gt;</a></td>
><td>定义域</td>
></tr>
><tr>
><td><a href="/tags/tag_legend.asp">&lt;legend&gt;</a></td>
><td>定义域的标题</td>
></tr>
><tr>
><td><a href="/tags/tag_select.asp">&lt;select&gt;</a></td>
><td>定义一个选择列表</td>
></tr>
><tr>
><td><a href="/tags/tag_optgroup.asp">&lt;optgroup&gt;</a></td>
><td>定义选项组</td>
></tr>
><tr>
><td><a href="/tags/tag_option.asp">&lt;option&gt;</a></td>
><td>定义下拉列表中的选项</td>
></tr>
><tr>
><td><a href="/tags/tag_button.asp">&lt;button&gt;</a></td>
><td>定义一个按钮</td>
></tr>
></tbody></table>
></div>

>
>
>

##附 Rails路由器入门
<http://guides.ruby-china.org/routing.html>
##学会使用api，学会读文档
